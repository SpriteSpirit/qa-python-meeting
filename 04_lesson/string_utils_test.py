import pytest
from string_utils import StringUtils


@pytest.fixture
def string_utils_instance():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—é—â–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ pytest_cases
    """
    return StringUtils()


# ------------- test_capitalize ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('hello world', 'Hello world'),
    ('python is awesome', 'Python is awesome'),
    ('zzz...', 'Zzz...'),
    ('–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç'),
    ('–ø—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç'),
])
def test_capitalize_positive(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ capitalize –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.capitilize(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('1234567890', '1234567890'),
    ('', ''),
    (' ', ' '),
    ('!welcome', '!welcome'),
    ('‚ùå', '‚ùå'),
    ('-!3', '-!3'),
])
def test_capitalize_negative(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ capitalize –Ω–µ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.capitilize(input_str) == expected_str


# ------------- test_trim ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('    hello world', 'hello world'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    (' python is awesome ', 'python is awesome '),  # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª—è—é—Ç—Å—è, –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –æ—Å—Ç–∞—é—Ç—Å—è
    ('     ', ''),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    (' . . ', '. . '),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
    ('Sun', 'Sun'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    (' a', 'a'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ
    ('abc   ', 'abc   '),  # –ü—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –æ—Å—Ç–∞—é—Ç—Å—è
    ('\t hello', '\t hello'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–±—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
    ('\n hello', '\n hello'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
    (' \n hello', '\n hello'),  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    (' ' * 1000 + 'text', 'text'),  # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('  \t\n hello', '\t\n hello'),  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    (' \r\n text', '\r\n text'),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('   \v text', '\v text'),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    (' ' + 'x' * 1000, 'x' * 1000),  # –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
    ('\t \n \r hello', '\t \n \r hello'),  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö whitespace —Å–∏–º–≤–æ–ª–æ–≤
    ('\r hello', '\r hello'),  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
])
def test_trim_positive(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.trim(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('1234567890', '1234567890'),  # –ß–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('', ''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('!123', '!123'),  # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('.   !123', '.   !123'),  # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('‚ùå', '‚ùå'),  # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('\u2000text', '\u2000text'),  # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0text', '\xa0text'),  # Non-breaking space
    ('\u3000text', '\u3000text'),  # –ò–¥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–±–µ–ª
    ('„ÄÄtext', '„ÄÄtext'),  # –ü–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
    ('\rtext', '\rtext'),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('\vtext', '\vtext'),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
])
def test_trim_negative(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –Ω–µ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.trim(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str', [
    None,
    123,
    True,
    ['string'],
    {'key': 'value'}
])
def test_trim_invalid_types(string_utils_instance, input_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(AttributeError):
        string_utils_instance.trim(input_str)


@pytest.mark.positive_test
def test_trim_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    """
    input_str = "  hello"
    original = input_str
    string_utils_instance.trim(input_str)
    assert input_str == original


# ------------- test_to_list ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    # –¢–µ—Å—Ç—ã –Ω–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    (',,,', ',', ['', '', '', '']),  # –¢–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    ('a,,b,,c', ',', ['a', '', 'b', '', 'c']),  # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    ('abc', ',', ['abc']),  # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    (',', ',', ['', '']),  # –û–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a,b,c,', ',', ['a', 'b', 'c', '']),  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ
    (',a,b,c', ',', ['', 'a', 'b', 'c']),  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–µ
    # –¢–µ—Å—Ç—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('a\nb\nc', '\n', ['a', 'b', 'c']),  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a\tb\tc', '\t', ['a', 'b', 'c']),  # –¢–∞–±—É–ª—è—Ü–∏—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a|b|c', '|', ['a', 'b', 'c']),  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a.b.c', '.', ['a', 'b', 'c']),  # –¢–æ—á–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    # –¢–µ—Å—Ç—ã –Ω–∞ –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    ('a:::b:::c', ':::', ['a', 'b', 'c']),  # –î–ª–∏–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a<->b<->c', '<->', ['a', 'b', 'c']),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('aANDbANDc', 'AND', ['a', 'b', 'c']),  # –°–ª–æ–≤–µ—Å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    # –¢–µ—Å—Ç—ã –Ω–∞ Unicode
    ('Œ±,Œ≤,Œ≥', ',', ['Œ±', 'Œ≤', 'Œ≥']),  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
    ('üòÄ,üòÇ,üòé', ',', ['üòÄ', 'üòÇ', 'üòé']),  # –≠–º–æ–¥–∑–∏
    ('–ø—Ä–∏–≤–µ—Ç,–º–∏—Ä', ',', ['–ø—Ä–∏–≤–µ—Ç', '–º–∏—Ä']),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
])
def test_to_list_with_delimiter_positive(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.
    """
    assert StringUtils.to_list(string_utils_instance, input_str, input_delimiter) == expected_str


@pytest.mark.positive_test
def test_to_list_immutability_default(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    input_str = "a,b,c"
    original = input_str
    string_utils_instance.to_list(input_str)
    assert input_str == original


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    ('1234567890', '123', ['', '4567890']),
    ('', ',', []),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('   ', ',', []),  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    ('a,b,c', '', ValueError),  # –ü—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
])
def test_to_list_with_delimiter_negative(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.
    """
    if expected_str is ValueError:
        with pytest.raises(ValueError):
            string_utils_instance.to_list(input_str, input_delimiter)
    else:
        assert string_utils_instance.to_list(input_str, input_delimiter) == expected_str


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('Everyday - I try and I try and I try', ['Everyday - I try and I try and I try']),
    ('I work, till, I ache, in my bones', ['I work', ' till', ' I ache', ' in my bones']),
    ('Ooh-each-morning-I-get-up-I-die-a-little', ['Ooh-each-morning-I-get-up-I-die-a-little']),
    ('Ah, got no common sense', ['Ah', ' got no common sense']),
])
def test_to_list_default(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    assert StringUtils.to_list(string_utils_instance, input_str) == expected_str


@pytest.mark.positive_test
def test_to_list_long_string(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ —Å –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    long_str = ','.join(['a'] * 1000)  # –°—Ç—Ä–æ–∫–∞ —Å 1000 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    result = string_utils_instance.to_list(long_str, ',')
    assert len(result) == 1000
    assert all(x == 'a' for x in result)


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_delimiter', [
    (None, ','),  # None –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (123, ','),  # –ß–∏—Å–ª–æ –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (True, ','),  # Boolean –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (['a', 'b'], ','),  # –°–ø–∏—Å–æ–∫ –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    ({'a': 1}, ','),  # –°–ª–æ–≤–∞—Ä—å –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
])
def test_to_list_invalid_input_types(string_utils_instance, input_str, input_delimiter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    with pytest.raises((AttributeError, TypeError)):
        string_utils_instance.to_list(input_str, input_delimiter)


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    ('a b c', None, ['a', 'b', 'c']),  # None –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º)
    ('a   b   c', None, ['a', 'b', 'c']),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    ('a\tb\nc', None, ['a', 'b', 'c']),  # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
])
def test_to_list_none_delimiter(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –º–µ—Ç–æ–¥ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    """
    assert string_utils_instance.to_list(input_str, input_delimiter) == expected_str


# ------------- test_contains ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    ('Hello, World!', 'H', True),  # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ
    ('Hello, World!', '!', True),  # –°–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ü–µ
    ('Hello, World!', 'o', True),  # –°–∏–º–≤–æ–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    ('Hello, World!', 'x', False),  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello\nWorld', '\n', True),  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    ('Hello\tWorld', '\t', True),  # –¢–∞–±—É–ª—è—Ü–∏—è
    ('Hello\\World', '\\', True),  # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    ('text\r', '\r', True),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('text\v', '\v', True),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    ('text\f', '\f', True),  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # Unicode —Å–∏–º–≤–æ–ª—ã
    ('–ü—Ä–∏–≤–µ—Ç', '–∏', True),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    ('Hello, ‰∏ñÁïå', '‰∏ñ', True),  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello, üåç', 'üåç', True),  # –≠–º–æ–¥–∑–∏
    ('‚åò‚åÉ‚å•‚áß', '‚åò', True),  # –°–∏–º–≤–æ–ª—ã Mac
    ('‚àë‚àè‚àê‚àÜ', '‚àë', True),  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Œ±Œ≤Œ≥Œ¥', 'Œ≤', True),  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã

    # –†–µ–≥–∏—Å—Ç—Ä
    ('Hello', 'h', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
    ('HELLO', 'h', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫

    # –ü—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('   ', ' ', True),  # –°—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('\t\n\r', '\t', True),  # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ('a', 'a', True),  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
    ('aa', 'a', True),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    ('', 'a', False),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (' ', '', True),  # –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –≤ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
    ('\0', '\0', True),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª
    ('abc\0def', '\0', True),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
])
def test_contains_positive(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    assert string_utils_instance.contains(input_str, input_symbol) == expected_bool


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_result', [
    ('text', 'ab', False),  # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    (['a'], 'a', True),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
])
def test_contains_negative_values(string_utils_instance, input_str, input_symbol, expected_result):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å False
    """
    assert string_utils_instance.contains(input_str, input_symbol) == expected_result


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_error', [
    ('text', ['a'], TypeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', 123, TypeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', None, TypeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ({'a': 1}, 'a', AttributeError),  # –°–ª–æ–≤–∞—Ä—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (True, 'a', AttributeError),  # Boolean –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (None, 'a', AttributeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (123, 'a', AttributeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    ('text', object(), TypeError),  # –û–±—ä–µ–∫—Ç –∫–∞–∫ —Å–∏–º–≤–æ–ª
    ('text', float(1.0), TypeError),  # Float –∫–∞–∫ —Å–∏–º–≤–æ–ª
    (b'bytes', 'a', TypeError),  # Bytes –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (bytearray(b'text'), 'a', TypeError),  # Bytearray –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
])
def test_contains_exceptions(string_utils_instance, input_str, input_symbol, expected_error):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(expected_error):
        string_utils_instance.contains(input_str, input_symbol)


@pytest.mark.positive_test
def test_contains_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_str = "Hello, World!"
    input_symbol = "o"
    original_str = input_str
    original_symbol = input_symbol

    string_utils_instance.contains(input_str, input_symbol)

    assert input_str == original_str
    assert input_symbol == original_symbol


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    ('üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë®', True),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —ç–º–æ–¥–∑–∏
    ('üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è', True),  # –≠–º–æ–¥–∑–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    ('üë®üèª‚Äçüíª', 'üë®', True),  # –≠–º–æ–¥–∑–∏ —Å —Ç–æ–Ω–æ–º –∫–æ–∂–∏
])
def test_contains_complex_unicode(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    assert string_utils_instance.contains(input_str, input_symbol) == expected_bool


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    (' \t\n\r\f\v', ' ', True),  # –í—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ('\u2000', '\u2000', True),  # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0', '\xa0', True),  # Non-breaking space
])
def test_contains_whitespace(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    assert string_utils_instance.contains(input_str, input_symbol) == expected_bool


# ------------- test_delete_symbol ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_str', [
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    ('Hello, World!', 'H', 'ello, World!'),  # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ
    ('Hello, World!', '!', 'Hello, World'),  # –°–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ü–µ
    ('Hello, World!', 'o', 'Hell, Wrld!'),  # –°–∏–º–≤–æ–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    ('Hello, World!', 'x', 'Hello, World!'),  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello\nWorld', '\n', 'HelloWorld'),  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    ('Hello\tWorld', '\t', 'HelloWorld'),  # –¢–∞–±—É–ª—è—Ü–∏—è
    ('Hello\\World', '\\', 'HelloWorld'),  # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    ('text\r', '\r', 'text'),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('text\v', '\v', 'text'),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    ('text\f', '\f', 'text'),  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # Unicode —Å–∏–º–≤–æ–ª—ã
    ('–ü—Ä–∏–≤–µ—Ç', '–∏', '–ü—Ä–≤–µ—Ç'),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    ('Hello, ‰∏ñÁïå', '‰∏ñ', 'Hello, Áïå'),  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello, üåç', 'üåç', 'Hello, '),  # –≠–º–æ–¥–∑–∏
    ('‚åò‚åÉ‚å•‚áß', '‚åò', '‚åÉ‚å•‚áß'),  # –°–∏–º–≤–æ–ª—ã Mac
    ('‚àë‚àè‚àê‚àÜ', '‚àë', '‚àè‚àê‚àÜ'),  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Œ±Œ≤Œ≥Œ¥', 'Œ≤', 'Œ±Œ≥Œ¥'),  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã

    # –†–µ–≥–∏—Å—Ç—Ä
    ('Hello', 'h', 'Hello'),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
    ('HELLO', 'h', 'HELLO'),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫

    # –ü—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('   ', ' ', ''),  # –°—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('\t\n\r', '\t', '\n\r'),  # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ('a', 'a', ''),  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
    ('aa', 'a', ''),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    ('', 'a', ''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (' ', '', ' '),  # –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –≤ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
    ('', '', ''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
    ('\0', '\0', ''),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª
    ('abc\0def', '\0', 'abcdef'),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
    ('text', '', 'text'),  # –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫
    ('SkyPro', 'Pro', 'Sky'),  # –ö–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    ('TestTest', 'Test', ''),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
    ('abcabc', 'abc', ''),  # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    ('Hello World', 'o W', 'Hellorld'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º
    ('TestMiddleTest', 'Middle', 'TestTest'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    ('PreTestPost', 'Test', 'PrePost'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
    ('Te[st]Te[st]', '[st]', 'TeTe'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏
    ('Hello  World', '  ', 'HelloWorld'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('abc123abc123', '123', 'abcabc'),  # –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ü–∏—Ñ—Ä
    ('Test_Test', '_', 'TestTest'),  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    ('aaa', 'a', ''),  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
    ('a.b.c.d', '.', 'abcd'),  # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    ('111222333', '2', '111333'),  # –£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
    ('  a  b  c  ', ' ', 'abc'),  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
])
def test_delete_symbol_positive(string_utils_instance, input_str, input_symbol, expected_str):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    assert string_utils_instance.delete_symbol(input_str, input_symbol) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_result', [
    ('text', 'ab', 'text'),  # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    ('', 'a', ''),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
])
def test_delete_symbol_negative_values(string_utils_instance, input_str, input_symbol, expected_result):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    assert string_utils_instance.delete_symbol(input_str, input_symbol) == expected_result


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_error', [
    ('text', ['a'], TypeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', 123, TypeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', None, TypeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ({'a': 1}, 'a', AttributeError),  # –°–ª–æ–≤–∞—Ä—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (True, 'a', AttributeError),  # Boolean –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (None, 'a', AttributeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (123, 'a', AttributeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    ('text', object(), TypeError),  # –û–±—ä–µ–∫—Ç –∫–∞–∫ —Å–∏–º–≤–æ–ª
    ('text', float(1.0), TypeError),  # Float –∫–∞–∫ —Å–∏–º–≤–æ–ª
    (b'bytes', 'a', TypeError),  # Bytes –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (bytearray(b'text'), 'a', TypeError),  # Bytearray –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (['a'], 'a', AttributeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
])
def test_delete_symbol_exceptions(string_utils_instance, input_str, input_symbol, expected_error):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(expected_error):
        string_utils_instance.delete_symbol(input_str, input_symbol)


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_str', [
    # –ü—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏
    ('üë®üë©üëßüë¶', 'üë®', 'üë©üëßüë¶'),  # –û—Ç–¥–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
    ('üåçüåétest', 'üåç', 'üåétest'),  # –ü—Ä–æ—Å—Ç–æ–π —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
    ('codeüéÆ', 'üéÆ', 'code'),  # –ü—Ä–æ—Å—Ç–æ–π —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
    ('üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë®', '‚Äçüë©‚Äçüëß‚Äçüë¶'),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —ç–º–æ–¥–∑–∏

    # –û–¥–∏–Ω–æ—á–Ω—ã–µ —ç–º–æ–¥–∑–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    ('üë©üèªüë©üèºüë©üèΩ', 'üë©üèª', 'üë©üèºüë©üèΩ'),  # –≠–º–æ–¥–∑–∏ —Å —Ç–æ–Ω–æ–º –∫–æ–∂–∏
    ('üö©üè≥Ô∏èüè¥', 'üè≥Ô∏è', 'üö©üè¥'),  # –≠–º–æ–¥–∑–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
])
def test_delete_symbol_complex_unicode(string_utils_instance, input_str, input_symbol, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    assert string_utils_instance.delete_symbol(input_str, input_symbol) == expected_str


@pytest.mark.positive_test
def test_delete_symbol_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_str = "Hello, World!"
    input_symbol = "o"
    original_str = input_str
    original_symbol = input_symbol

    string_utils_instance.delete_symbol(input_str, input_symbol)

    assert input_str == original_str
    assert input_symbol == original_symbol


# ------------- test_starts_with ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    ('Hello, World!', 'H', True),  # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ
    ('Hello, World!', '!', False),  # –°–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ü–µ
    ('Hello, World!', 'o', False),  # –°–∏–º–≤–æ–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    ('Hello, World!', 'x', False),  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('\nHello World', '\n', True),  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    ('\tHello World', '\t', True),  # –¢–∞–±—É–ª—è—Ü–∏—è
    ('\\Hello World', '\\', True),  # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    ('\rtext', '\r', True),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('\vtext', '\v', True),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    ('\ftext', '\f', True),  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # Unicode —Å–∏–º–≤–æ–ª—ã
    ('–ü—Ä–∏–≤–µ—Ç', '–ü', True),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    ('‰∏ñÁïå, hello', '‰∏ñ', True),  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('üåç, hello', 'üåç', True),  # –≠–º–æ–¥–∑–∏
    ('‚åò‚åÉ‚å•‚áß', '‚åò', True),  # –°–∏–º–≤–æ–ª—ã Mac
    ('‚àë‚àè‚àê‚àÜ', '‚àë', True),  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Œ±Œ≤Œ≥Œ¥', 'Œ±', True),  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã

    # –†–µ–≥–∏—Å—Ç—Ä
    ('Hello', 'h', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
    ('hello', 'H', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫

    # –ü—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('   ', ' ', True),  # –°—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('\t\n\r', '\t', True),  # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ('a', 'a', True),  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
    ('aa', 'a', True),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    ('', 'a', False),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (' ', '', True),  # –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –≤ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
    ('\0', '\0', True),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª
    ('abc\0def', '\0', False),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
])
def test_starts_with_positive(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    assert string_utils_instance.starts_with(input_str, input_symbol) == expected_bool


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_result', [
    ('text', 'ab', False),  # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
])
def test_starts_with_negative_values(string_utils_instance, input_str, input_symbol, expected_result):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å False
    """
    assert string_utils_instance.starts_with(input_str, input_symbol) == expected_result


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_error', [
    ('text', ['a'], TypeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', 123, TypeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', None, TypeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ({'a': 1}, 'a', AttributeError),  # –°–ª–æ–≤–∞—Ä—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (True, 'a', AttributeError),  # Boolean –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (None, 'a', AttributeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (123, 'a', AttributeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    ('text', object(), TypeError),  # –û–±—ä–µ–∫—Ç –∫–∞–∫ —Å–∏–º–≤–æ–ª
    ('text', float(1.0), TypeError),  # Float –∫–∞–∫ —Å–∏–º–≤–æ–ª
    (b'bytes', 'a', TypeError),  # Bytes –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (bytearray(b'text'), 'a', TypeError),  # Bytearray –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (['a'], 'a', AttributeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
])
def test_starts_with_exceptions(string_utils_instance, input_str, input_symbol, expected_error):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(expected_error):
        string_utils_instance.starts_with(input_str, input_symbol)


@pytest.mark.positive_test
def test_starts_with_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_str = "Hello, World!"
    input_symbol = "o"
    original_str = input_str
    original_symbol = input_symbol

    string_utils_instance.starts_with(input_str, input_symbol)

    assert input_str == original_str
    assert input_symbol == original_symbol


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    ('üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë®', True),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —ç–º–æ–¥–∑–∏
    ('üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è', True),  # –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    ('üë®üèª‚Äçüíª', 'üë®', True),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —ç–º–æ–¥–∑–∏ (—á–µ–ª–æ–≤–µ–∫ –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º)
])
def test_starts_with_complex_unicode(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    assert string_utils_instance.starts_with(input_str, input_symbol) == expected_bool


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    (' \t\n\r\f\v', ' ', True),  # –í—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ('\u2000', '\u2000', True),  # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0', '\xa0', True),  # Non-breaking space
])
def test_starts_with_whitespace(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    assert string_utils_instance.starts_with(input_str, input_symbol) == expected_bool


# ------------- test_end_with ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    ('Missing', 'M', False),  # –°–∏–º–≤–æ–ª –≤ –Ω–∞—á–∞–ª–µ
    ('Hello, World!', '!', True),  # –°–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ü–µ
    ('Hello, World!', 'o', False),  # –°–∏–º–≤–æ–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    ('Hello, World!', 'x', False),  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello World\n', '\n', True),  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    ('Hello World\t', '\t', True),  # –¢–∞–±—É–ª—è—Ü–∏—è
    ('Hello World\\', '\\', True),  # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    ('text\r', '\r', True),  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('text\v', '\v', True),  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    ('text\f', '\f', True),  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # Unicode —Å–∏–º–≤–æ–ª—ã
    ('–ü—Ä–∏–≤–µ—Ç', '—Ç', True),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    ('Hello,‰∏ñÁïå', 'Áïå', True),  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Hello, üåç', 'üåç', True),  # –≠–º–æ–¥–∑–∏
    ('‚åò‚åÉ‚å•‚áß', '‚áß', True),  # –°–∏–º–≤–æ–ª—ã Mac
    ('‚àë‚àè‚àê‚àÜ', '‚àÜ', True),  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    ('Œ±Œ≤Œ≥Œ¥', 'Œ¥', True),  # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã

    # –†–µ–≥–∏—Å—Ç—Ä
    ('Hello', 'O', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
    ('HELLO', 'o', False),  # –†–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫

    # –ü—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('   ', ' ', True),  # –°—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('\t\n\r', '\r', True),  # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ('a', 'a', True),  # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª
    ('aa', 'a', True),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª
    ('', 'a', False),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (' ', '', True),  # –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –≤ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
    ('\0', '\0', True),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª
    ('abc\0def', '\0', False),  # –ù—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
])
def test_end_with_positive(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    assert string_utils_instance.end_with(input_str, input_symbol) == expected_bool


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_result', [
    ('text', 'ab', False),  # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
])
def test_end_with_negative_values(string_utils_instance, input_str, input_symbol, expected_result):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å False
    """
    assert string_utils_instance.end_with(input_str, input_symbol) == expected_result


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_symbol, expected_error', [
    ('text', ['a'], TypeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', 123, TypeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('text', None, TypeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ({'a': 1}, 'a', AttributeError),  # –°–ª–æ–≤–∞—Ä—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (True, 'a', AttributeError),  # Boolean –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (None, 'a', AttributeError),  # None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    (123, 'a', AttributeError),  # –ß–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
    ('text', object(), TypeError),  # –û–±—ä–µ–∫—Ç –∫–∞–∫ —Å–∏–º–≤–æ–ª
    ('text', float(1.0), TypeError),  # Float –∫–∞–∫ —Å–∏–º–≤–æ–ª
    (b'bytes', 'a', TypeError),  # Bytes –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (bytearray(b'text'), 'a', TypeError),  # Bytearray –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    (['a'], 'a', AttributeError),  # –°–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫–∏
])
def test_end_with_exceptions(string_utils_instance, input_str, input_symbol, expected_error):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(expected_error):
        string_utils_instance.end_with(input_str, input_symbol)


@pytest.mark.positive_test
def test_end_with_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_str = "Hello, World!"
    input_symbol = "o"
    original_str = input_str
    original_symbol = input_symbol

    string_utils_instance.end_with(input_str, input_symbol)

    assert input_str == original_str
    assert input_symbol == original_symbol


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    ('üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë¶', True),  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —ç–º–æ–¥–∑–∏
    ('üè≥Ô∏è‚Äçüåà', 'üåà', True),  # –≠–º–æ–¥–∑–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    ('üë®üèª‚Äçüíª', 'üíª', True),  # –≠–º–æ–¥–∑–∏ —Å —Ç–æ–Ω–æ–º –∫–æ–∂–∏
])
def test_end_with_complex_unicode(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    """
    assert string_utils_instance.end_with(input_str, input_symbol) == expected_bool


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_symbol, expected_bool', [
    (' \t\n\r\f\v', ' ', False),    # –í—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    (' \t\n\r\f\v', '\v', True),    # –í—Å–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    ('\u2000', '\u2000', True),     # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0', '\xa0', True),         # Non-breaking space
])
def test_end_with_whitespace(string_utils_instance, input_str, input_symbol, expected_bool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    assert string_utils_instance.end_with(input_str, input_symbol) == expected_bool


# ------------- test_is_empty ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_bool', [
    # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    ('', True),             # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    (' ', True),            # –û–¥–∏–Ω –ø—Ä–æ–±–µ–ª
    ('   ', True),          # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤
    ('\t', False),          # –¢–∞–±—É–ª—è—Ü–∏—è
    ('\n', False),          # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    ('\r', False),          # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    (' \t\n\r ', False),    # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

    # –ù–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    ('a', False),           # –û–¥–∏–Ω —Å–∏–º–≤–æ–ª
    ('abc', False),         # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    (' abc ', False),       # –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    ('abc def', False),     # –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º –≤–Ω—É—Ç—Ä–∏
    ('\tabc', False),       # –¢–µ–∫—Å—Ç —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π –≤ –Ω–∞—á–∞–ª–µ
    ('abc\n', False),       # –¢–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ('\u0020', True),       # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0', False),        # Non-breaking space (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–æ–º)
    ('„ÄÄ', False),          # –ò–¥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–±–µ–ª (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª–æ–º)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    (' \u0020 ', True),     # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∏ Unicode –ø—Ä–æ–±–µ–ª–∞
    ('    \n    ', False),  # –ü—Ä–æ–±–µ–ª—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
    ('\t    \t', False),    # –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–∞–±—É–ª—è—Ü–∏—è–º–∏
    ('0', False),           # –¶–∏—Ñ—Ä–∞
    ('!@#$', False),        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('üëç', False),          # –≠–º–æ–¥–∑–∏
    ('„ÅÇ', False),          # –ò–µ—Ä–æ–≥–ª–∏—Ñ
    ('\u200b', False),      # Zero-width space

    # Zero-width space —Å–∏–º–≤–æ–ª –≤ Unicode, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π ¬´–Ω–µ–≤–∏–¥–∏–º–æ–µ¬ª –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π.
    # –û–Ω –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –≤–∏–¥–∏–º–æ–π –º–µ—Ç–∫–∏ –∏ –Ω–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.
])
def test_is_empty_positive(string_utils_instance, input_str, expected_bool):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True
    - –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False
    - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–∫—Ä–æ–º–µ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞) –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False
    """
    assert string_utils_instance.is_empty(input_str) == expected_bool


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, expected_error', [
    (None, AttributeError),         # None –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    (123, AttributeError),          # –ß–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    (True, AttributeError),         # Boolean –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    ([''], AttributeError),         # –°–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    ({'': ''}, AttributeError),     # –°–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
])
def test_is_empty_exceptions(string_utils_instance, input_str, expected_error):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(expected_error):
        string_utils_instance.is_empty(input_str)


@pytest.mark.positive_test
def test_is_empty_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_str = "  test  "
    original = input_str
    string_utils_instance.is_empty(input_str)
    assert input_str == original


@pytest.mark.positive_test
def test_is_empty_long_string(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    """
    long_spaces = " " * 1000
    long_text = "a" * 1000

    assert string_utils_instance.is_empty(long_spaces)
    assert not string_utils_instance.is_empty(long_text)
    assert not string_utils_instance.is_empty(f"{long_spaces}{long_text}")


# ------------- test_list_to_string ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_list, joiner, expected_str', [
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    ([1, 2, 3, 4], ", ", "1, 2, 3, 4"),                     # –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    (["Sky", "Pro"], ", ", "Sky, Pro"),                     # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    (["Sky", "Pro"], "-", "Sky-Pro"),                       # –î—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ
    ([1, "two", 3.0, False], ", ", "1, two, 3.0, False"),   # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    ([None, True, 0], "|", "None|True|0"),                  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    # –†–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    (["a", "b", "c"], "", "abc"),                           # –ü—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (["a", "b", "c"], " ", "a b c"),                        # –ü—Ä–æ–±–µ–ª
    (["a", "b", "c"], "\n", "a\nb\nc"),                     # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    (["a", "b", "c"], "\t", "a\tb\tc"),                     # –¢–∞–±—É–ª—è—Ü–∏—è

    # Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    (["–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä"], ", ", "–ø—Ä–∏–≤–µ—Ç, –º–∏—Ä"),               # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    (["üåç", "üåé", "üåè"], "‚Üí", "üåç‚Üíüåé‚Üíüåè"),                 # –≠–º–æ–¥–∑–∏
    (["Œ±", "Œ≤", "Œ≥"], "|", "Œ±|Œ≤|Œ≥"),                        # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã

    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ([1], ", ", "1"),  # –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
    (["a", "a", "a"], ", ", "a, a, a"),                     # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    ([" ", " "], ", ", " ,  "),                             # –ü—Ä–æ–±–µ–ª—ã –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã
    (["", "", ""], ", ", ", , "),                           # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã
])
def test_list_to_string_positive(string_utils_instance, input_list, joiner, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    """
    assert string_utils_instance.list_to_string(input_list, joiner) == expected_str


@pytest.mark.positive_test
def test_list_to_string_default_joiner(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    input_list = ["a", "b", "c"]
    expected_str = "a, b, c"
    assert string_utils_instance.list_to_string(input_list) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_list, joiner, expected_result', [
    (None, ", ", TypeError),            # None –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
    (123, ", ", TypeError),             # –ß–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
    ({1, 2, 3}, ", ", TypeError),       # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
    ({"a": 1}, ", ", KeyError),         # –°–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
    ("abc", ", ", "a, b, c"),           # –°—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    ([], ", ", ""),                     # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    ([1, 2], None, TypeError),          # None –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ([1, 2], 123, TypeError),           # –ß–∏—Å–ª–æ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ([1, 2], ["a"], TypeError),         # –°–ø–∏—Å–æ–∫ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
])
def test_list_to_string_negative(string_utils_instance, input_list, joiner, expected_result):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if isinstance(expected_result, type) and issubclass(expected_result, Exception):
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with pytest.raises(expected_result):
            string_utils_instance.list_to_string(input_list, joiner)
    else:
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = string_utils_instance.list_to_string(input_list, joiner)
        assert result == expected_result


@pytest.mark.positive_test
def test_list_to_string_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
    """
    input_list = ["a", "b", "c"]
    joiner = ", "
    original_list = input_list.copy()
    original_joiner = joiner

    string_utils_instance.list_to_string(input_list, joiner)

    assert input_list == original_list
    assert joiner == original_joiner


@pytest.mark.positive_test
def test_list_to_string_long_list(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ —Å –¥–ª–∏–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    """
    long_list = list(range(1000))
    result = string_utils_instance.list_to_string(long_list)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assert result.startswith("0, 1, 2")
    assert result.endswith("998, 999")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    assert result.count(", ") == 999
