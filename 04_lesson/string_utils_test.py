import pytest
from string_utils import StringUtils


@pytest.fixture
def string_utils_instance():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—é—â–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ pytest_cases
    """
    return StringUtils()


# ------------- test_capitalize ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('hello world', 'Hello world'),
    ('python is awesome', 'Python is awesome'),
    ('zzz...', 'Zzz...'),
    ('–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç'),
    ('–ø—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç'),
])
def test_capitalize_positive(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ capitalize –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.capitilize(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('1234567890', '1234567890'),
    ('', ''),
    (' ', ' '),
    ('!welcome', '!welcome'),
    ('‚ùå', '‚ùå'),
    ('-!3', '-!3'),
])
def test_capitalize_negative(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ capitalize –Ω–µ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.capitilize(input_str) == expected_str


# ------------- test_trim ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('    hello world', 'hello world'),                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    (' python is awesome ', 'python is awesome '),      # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª—è—é—Ç—Å—è, –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –æ—Å—Ç–∞—é—Ç—Å—è
    ('     ', ''),                                      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    (' . . ', '. . '),                                  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
    ('Sun', 'Sun'),                                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    (' a', 'a'),                                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ
    ('abc   ', 'abc   '),                               # –ü—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –æ—Å—Ç–∞—é—Ç—Å—è
    ('\t hello', '\t hello'),                           # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–±—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
    ('\n hello', '\n hello'),                           # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
    (' \n hello', '\n hello'),                          # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    (' ' * 1000 + 'text', 'text'),                      # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('  \t\n hello', '\t\n hello'),                     # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    (' \r\n text', '\r\n text'),                        # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('   \v text', '\v text'),                          # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
    (' ' + 'x' * 1000, 'x' * 1000),                     # –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞
    ('\t \n \r hello', '\t \n \r hello'),               # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö whitespace —Å–∏–º–≤–æ–ª–æ–≤
    ('\r hello', '\r hello'),                           # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
])
def test_trim_positive(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.trim(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('1234567890', '1234567890'),                       # –ß–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    ('', ''),                                           # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('!123', '!123'),                                   # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('.   !123', '.   !123'),                           # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('‚ùå', '‚ùå'),                                       # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    ('\u2000text', '\u2000text'),                       # Unicode –ø—Ä–æ–±–µ–ª
    ('\xa0text', '\xa0text'),                           # Non-breaking space
    ('\u3000text', '\u3000text'),                       # –ò–¥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–±–µ–ª
    ('„ÄÄtext', '„ÄÄtext'),                                # –ü–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
    ('\rtext', '\rtext'),                               # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ('\vtext', '\vtext'),                               # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç–∞–±—É–ª—è—Ü–∏—è
])
def test_trim_negative(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –Ω–µ –º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    assert string_utils_instance.trim(input_str) == expected_str


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str', [
    None,
    123,
    True,
    ['string'],
    {'key': 'value'}
])
def test_trim_invalid_types(string_utils_instance, input_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ trim –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    """
    with pytest.raises(AttributeError):
        string_utils_instance.trim(input_str)


@pytest.mark.positive_test
def test_trim_immutability(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    """
    input_str = "  hello"
    original = input_str
    string_utils_instance.trim(input_str)
    assert input_str == original


# ------------- test_to_list ------------- #
@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    # –¢–µ—Å—Ç—ã –Ω–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    (',,,', ',', ['', '', '', '']),                 # –¢–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    ('a,,b,,c', ',', ['a', '', 'b', '', 'c']),      # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    ('abc', ',', ['abc']),                          # –°—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    (',', ',', ['', '']),                           # –û–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a,b,c,', ',', ['a', 'b', 'c', '']),           # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ
    (',a,b,c', ',', ['', 'a', 'b', 'c']),           # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–µ
    # –¢–µ—Å—Ç—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ('a\nb\nc', '\n', ['a', 'b', 'c']),             # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a\tb\tc', '\t', ['a', 'b', 'c']),             # –¢–∞–±—É–ª—è—Ü–∏—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a|b|c', '|', ['a', 'b', 'c']),                # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a.b.c', '.', ['a', 'b', 'c']),                # –¢–æ—á–∫–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    # –¢–µ—Å—Ç—ã –Ω–∞ –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    ('a:::b:::c', ':::', ['a', 'b', 'c']),          # –î–ª–∏–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('a<->b<->c', '<->', ['a', 'b', 'c']),          # –°–æ—Å—Ç–∞–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('aANDbANDc', 'AND', ['a', 'b', 'c']),          # –°–ª–æ–≤–µ—Å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    # –¢–µ—Å—Ç—ã –Ω–∞ Unicode
    ('Œ±,Œ≤,Œ≥', ',', ['Œ±', 'Œ≤', 'Œ≥']),                # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
    ('üòÄ,üòÇ,üòé', ',', ['üòÄ', 'üòÇ', 'üòé']),         # –≠–º–æ–¥–∑–∏
    ('–ø—Ä–∏–≤–µ—Ç,–º–∏—Ä', ',', ['–ø—Ä–∏–≤–µ—Ç', '–º–∏—Ä']),         # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
])
def test_to_list_with_delimiter_positive(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.
    """
    assert StringUtils.to_list(string_utils_instance, input_str, input_delimiter) == expected_str


@pytest.mark.positive_test
def test_to_list_immutability_default(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    input_str = "a,b,c"
    original = input_str
    string_utils_instance.to_list(input_str)
    assert input_str == original


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    ('1234567890', '123', ['', '4567890']),
    ('', ',', []),  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('   ', ',', []),  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    ('a,b,c', '', ValueError),  # –ü—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
])
def test_to_list_with_delimiter_negative(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.
    """
    if expected_str is ValueError:
        with pytest.raises(ValueError):
            string_utils_instance.to_list(input_str, input_delimiter)
    else:
        assert string_utils_instance.to_list(input_str, input_delimiter) == expected_str


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, expected_str', [
    ('Everyday - I try and I try and I try', ['Everyday - I try and I try and I try']),
    ('I work, till, I ache, in my bones', ['I work', ' till', ' I ache', ' in my bones']),
    ('Ooh-each-morning-I-get-up-I-die-a-little', ['Ooh-each-morning-I-get-up-I-die-a-little']),
    ('Ah, got no common sense', ['Ah', ' got no common sense']),
])
def test_to_list_default(string_utils_instance, input_str, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    assert StringUtils.to_list(string_utils_instance, input_str) == expected_str


@pytest.mark.positive_test
def test_to_list_long_string(string_utils_instance):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ —Å –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    long_str = ','.join(['a'] * 1000)  # –°—Ç—Ä–æ–∫–∞ —Å 1000 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    result = string_utils_instance.to_list(long_str, ',')
    assert len(result) == 1000
    assert all(x == 'a' for x in result)


@pytest.mark.negative_test
@pytest.mark.parametrize('input_str, input_delimiter', [
    (None, ','),          # None –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (123, ','),           # –ß–∏—Å–ª–æ –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (True, ','),          # Boolean –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    (['a', 'b'], ','),    # –°–ø–∏—Å–æ–∫ –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    ({'a': 1}, ','),      # –°–ª–æ–≤–∞—Ä—å –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
])
def test_to_list_invalid_input_types(string_utils_instance, input_str, input_delimiter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    with pytest.raises((AttributeError, TypeError)):
        string_utils_instance.to_list(input_str, input_delimiter)


@pytest.mark.positive_test
@pytest.mark.parametrize('input_str, input_delimiter, expected_str', [
    ('a b c', None, ['a', 'b', 'c']),          # None –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º)
    ('a   b   c', None, ['a', 'b', 'c']),      # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    ('a\tb\nc', None, ['a', 'b', 'c']),        # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
])
def test_to_list_none_delimiter(string_utils_instance, input_str, input_delimiter, expected_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ None –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –º–µ—Ç–æ–¥ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    """
    assert string_utils_instance.to_list(input_str, input_delimiter) == expected_str
